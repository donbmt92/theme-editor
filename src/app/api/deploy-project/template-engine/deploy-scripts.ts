import { DEPLOY_SCRIPT_NAMES, SERVER_TYPES } from '../constants'
import { NginxParams, ApacheParams, NodeParams, DockerParams } from '../types'

/**
 * Get deploy script name for server type
 */
export function getDeployScriptName(serverType: string): string {
  return DEPLOY_SCRIPT_NAMES[serverType as keyof typeof DEPLOY_SCRIPT_NAMES] || 'deploy.sh'
}

/**
 * Generate Nginx deploy script
 */
export function generateNginxDeployScript({ projectName, domain }: NginxParams): string {
  return `#!/bin/bash
# Optimized deploy script cho ${projectName} tr√™n Nginx (Static HTML)
# T·∫°o b·ªüi Theme Editor v2.0 - Fixed version

set -e

echo "üöÄ B·∫Øt ƒë·∫ßu deploy ${projectName}..."

# C·∫•u h√¨nh
PROJECT_NAME="${projectName}"
DOMAIN="${domain}"
NGINX_ROOT="/var/www/\$PROJECT_NAME"
NGINX_CONFIG="/etc/nginx/sites-available/\$PROJECT_NAME"

# Ki·ªÉm tra quy·ªÅn sudo
if [ "\$EUID" -ne 0 ]; then
    echo "‚ùå Script c·∫ßn ch·∫°y v·ªõi quy·ªÅn sudo"
    echo "S·ª≠ d·ª•ng: sudo ./deploy-nginx.sh"
    exit 1
fi

# Ki·ªÉm tra conflict domain
echo "üîç Ki·ªÉm tra conflict domain..."
if [ -f "/etc/nginx/sites-enabled/\$PROJECT_NAME" ]; then
    echo "‚ö†Ô∏è  Site \$PROJECT_NAME ƒë√£ t·ªìn t·∫°i, s·∫Ω ghi ƒë√®..."
    sudo rm -f /etc/nginx/sites-enabled/\$PROJECT_NAME
fi

echo "üìÅ T·∫°o th∆∞ m·ª•c web root..."
mkdir -p \$NGINX_ROOT
chown www-data:www-data \$NGINX_ROOT

echo "üìã Copy files to web directory..."
cp -r * \$NGINX_ROOT/

# Lo·∫°i b·ªè file script kh·ªèi web directory
rm -f \$NGINX_ROOT/*.sh
rm -f \$NGINX_ROOT/deploy-metadata.json

# Set quy·ªÅn cho files
chown -R www-data:www-data \$NGINX_ROOT
chmod -R 755 \$NGINX_ROOT

echo "‚öôÔ∏è T·∫°o c·∫•u h√¨nh Nginx..."
cat > \$NGINX_CONFIG << 'NGINX_EOF'
server {
    listen 80;
    server_name ${domain} www.${domain};
    root /var/www/${projectName};
    index index.html index.htm;

    location / {
        try_files \$uri \$uri/ /index.html;
    }

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss;

    # Cache static assets
    location ~* \\.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
    }

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
}
NGINX_EOF

echo "üîó K√≠ch ho·∫°t site..."
ln -sf \$NGINX_CONFIG /etc/nginx/sites-enabled/

echo "üîÑ Test c·∫•u h√¨nh Nginx..."
nginx -t

if [ \$? -eq 0 ]; then
    echo "‚úÖ C·∫•u h√¨nh Nginx h·ª£p l·ªá"
    echo "üîÑ Reload Nginx..."
    systemctl reload nginx
    echo "‚úÖ Deploy th√†nh c√¥ng!"
    echo ""
    echo "üåê Website c·ªßa b·∫°n c√≥ th·ªÉ truy c·∫≠p t·∫°i:"
    echo "   http://${domain}"
    echo ""
    echo "üìù B∆∞·ªõc ti·∫øp theo:"
    echo "   1. C·∫≠p nh·∫≠t DNS ƒë·ªÉ tr·ªè ${domain} v·ªÅ server n√†y"
    echo "   2. C√†i ƒë·∫∑t SSL certificate v·ªõi Let's Encrypt:"
    echo "      sudo certbot --nginx -d ${domain} -d www.${domain}"
else
    echo "‚ùå C·∫•u h√¨nh Nginx c√≥ l·ªói!"
    echo "üîç Ki·ªÉm tra l·ªói chi ti·∫øt:"
    echo "   - sudo nginx -T | grep nginx_root"
    echo "   - sudo grep -r 'nginx_root' /etc/nginx/"
    echo "   - sudo ls -la /etc/nginx/sites-enabled/"
    echo "   - sudo cat /etc/nginx/sites-available/\$PROJECT_NAME"
    exit 1
fi`
}

/**
 * Generate Apache deploy script
 */
export function generateApacheDeployScript({ projectName, domain }: ApacheParams): string {
  return `#!/bin/bash
# Optimized Apache deploy script cho ${projectName}
# T·∫°o b·ªüi Theme Editor v2.0

set -e

echo "üöÄ B·∫Øt ƒë·∫ßu deploy ${projectName} tr√™n Apache..."

# C·∫•u h√¨nh
PROJECT_NAME="${projectName}"
DOMAIN="${domain}"
APACHE_ROOT="/var/www/\$PROJECT_NAME"
APACHE_CONFIG="/etc/apache2/sites-available/\$PROJECT_NAME.conf"

# Ki·ªÉm tra quy·ªÅn sudo
if [ "\$EUID" -ne 0 ]; then
    echo "‚ùå Script c·∫ßn ch·∫°y v·ªõi quy·ªÅn sudo"
    exit 1
fi

echo "üìÅ T·∫°o th∆∞ m·ª•c web root..."
mkdir -p \$APACHE_ROOT
chown www-data:www-data \$APACHE_ROOT

echo "üìã Copy files to web directory..."
cp -r * \$APACHE_ROOT/

# Lo·∫°i b·ªè file script
rm -f \$APACHE_ROOT/*.sh
rm -f \$APACHE_ROOT/deploy-metadata.json

# Set quy·ªÅn
chown -R www-data:www-data \$APACHE_ROOT
chmod -R 755 \$APACHE_ROOT

echo "‚öôÔ∏è T·∫°o c·∫•u h√¨nh Apache..."
cat > \$APACHE_CONFIG << 'APACHE_EOF'
<VirtualHost *:80>
    ServerName ${domain}
    ServerAlias www.${domain}
    DocumentRoot /var/www/${projectName}
    
    <Directory /var/www/${projectName}>
        Options Indexes FollowSymLinks
        AllowOverride All
        Require all granted
    </Directory>
    
    # Enable compression
    LoadModule deflate_module modules/mod_deflate.so
    <IfModule mod_deflate.c>
        AddOutputFilterByType DEFLATE text/plain
        AddOutputFilterByType DEFLATE text/html
        AddOutputFilterByType DEFLATE text/xml
        AddOutputFilterByType DEFLATE text/css
        AddOutputFilterByType DEFLATE application/xml
        AddOutputFilterByType DEFLATE application/xhtml+xml
        AddOutputFilterByType DEFLATE application/rss+xml
        AddOutputFilterByType DEFLATE application/javascript
        AddOutputFilterByType DEFLATE application/x-javascript
    </IfModule>
    
    # Security headers
    Header always set X-Frame-Options "SAMEORIGIN"
    Header always set X-XSS-Protection "1; mode=block"
    Header always set X-Content-Type-Options "nosniff"
</VirtualHost>
APACHE_EOF

echo "üîó K√≠ch ho·∫°t site..."
a2ensite \$PROJECT_NAME

echo "üîÑ Test c·∫•u h√¨nh Apache..."
apache2ctl configtest

if [ \$? -eq 0 ]; then
    echo "‚úÖ C·∫•u h√¨nh Apache h·ª£p l·ªá"
    echo "üîÑ Reload Apache..."
    systemctl reload apache2
    echo "‚úÖ Deploy th√†nh c√¥ng!"
    echo ""
    echo "üåê Website: http://${domain}"
else
    echo "‚ùå C·∫•u h√¨nh Apache c√≥ l·ªói!"
    exit 1
fi`
}

/**
 * Generate Node.js deploy script
 */
export function generateNodeDeployScript({ projectName }: NodeParams): string {
  return `#!/bin/bash
# Optimized Node.js deploy script cho ${projectName}
# T·∫°o b·ªüi Theme Editor v2.0

set -e

echo "üöÄ B·∫Øt ƒë·∫ßu deploy ${projectName} tr√™n Node.js..."

# C·∫•u h√¨nh
PROJECT_NAME="${projectName}"
APP_DIR="/opt/\$PROJECT_NAME"
SERVICE_NAME="\$PROJECT_NAME"
USER="node"

# Ki·ªÉm tra quy·ªÅn sudo
if [ "\$EUID" -ne 0 ]; then
    echo "‚ùå Script c·∫ßn ch·∫°y v·ªõi quy·ªÅn sudo"
    exit 1
fi

echo "üìÅ T·∫°o th∆∞ m·ª•c ·ª©ng d·ª•ng..."
mkdir -p \$APP_DIR
chown \$USER:\$USER \$APP_DIR

echo "üìã Copy files to app directory..."
cp -r * \$APP_DIR/

# Lo·∫°i b·ªè file script
rm -f \$APP_DIR/*.sh
rm -f \$APP_DIR/deploy-metadata.json

# Set quy·ªÅn
chown -R \$USER:\$USER \$APP_DIR
chmod -R 755 \$APP_DIR

echo "üì¶ C√†i ƒë·∫∑t dependencies..."
cd \$APP_DIR
if [ -f "package.json" ]; then
    npm install --production
else
    echo "‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y package.json"
fi

echo "‚öôÔ∏è T·∫°o systemd service..."
cat > /etc/systemd/system/\$SERVICE_NAME.service << 'SERVICE_EOF'
[Unit]
Description=${projectName} Node.js App
After=network.target

[Service]
Type=simple
User=node
WorkingDirectory=/opt/${projectName}
ExecStart=/usr/bin/node server.js
Restart=on-failure
RestartSec=10

[Install]
WantedBy=multi-user.target
SERVICE_EOF

echo "üîÑ Reload systemd v√† k√≠ch ho·∫°t service..."
systemctl daemon-reload
systemctl enable \$SERVICE_NAME

echo "üöÄ Kh·ªüi ƒë·ªông service..."
systemctl start \$SERVICE_NAME

if systemctl is-active --quiet \$SERVICE_NAME; then
    echo "‚úÖ Deploy th√†nh c√¥ng!"
    echo "üåê Service: \$SERVICE_NAME"
    echo "üìä Status: \$(systemctl status \$SERVICE_NAME --no-pager -l)"
else
    echo "‚ùå Service kh·ªüi ƒë·ªông th·∫•t b·∫°i!"
    systemctl status \$SERVICE_NAME --no-pager -l
    exit 1
fi`
}

/**
 * Generate Docker deploy script
 */
export function generateDockerDeployScript({ projectName, domain }: DockerParams): string {
  return `#!/bin/bash
# Optimized Docker deploy script cho ${projectName}
# T·∫°o b·ªüi Theme Editor v2.0

set -e

echo "üöÄ B·∫Øt ƒë·∫ßu deploy ${projectName} v·ªõi Docker..."

# C·∫•u h√¨nh
PROJECT_NAME="${projectName}"
DOMAIN="${domain}"
DOCKER_IMAGE="\$PROJECT_NAME:latest"
CONTAINER_NAME="\$PROJECT_NAME"
PORT="80"

# Ki·ªÉm tra Docker
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t"
    exit 1
fi

echo "üìÅ T·∫°o Dockerfile..."
cat > Dockerfile << 'DOCKERFILE_EOF'
FROM nginx:alpine
COPY . /usr/share/nginx/html
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
DOCKERFILE_EOF

echo "üê≥ Build Docker image..."
docker build -t \$DOCKER_IMAGE .

echo "üîÑ D·ª´ng container c≈© n·∫øu c√≥..."
docker stop \$CONTAINER_NAME 2>/dev/null || true
docker rm \$CONTAINER_NAME 2>/dev/null || true

echo "üöÄ Kh·ªüi ƒë·ªông container m·ªõi..."
docker run -d \\
  --name \$CONTAINER_NAME \\
  -p \$PORT:80 \\
  --restart unless-stopped \\
  \$DOCKER_IMAGE

if docker ps | grep -q \$CONTAINER_NAME; then
    echo "‚úÖ Deploy th√†nh c√¥ng!"
    echo "üê≥ Container: \$CONTAINER_NAME"
    echo "üåê Port: \$PORT"
    echo "üìä Status: \$(docker ps --filter name=\$CONTAINER_NAME --format 'table {{.Names}}\\t{{.Status}}\\t{{.Ports}}')"
    
    # Setup reverse proxy n·∫øu c·∫ßn
    if [ ! -z "${domain}" ] && [ "${domain}" != "localhost" ]; then
        echo "üìù L∆∞u √Ω: C·∫ßn c·∫•u h√¨nh reverse proxy ƒë·ªÉ tr·ªè ${domain} v·ªÅ port \$PORT"
    fi
else
    echo "‚ùå Container kh·ªüi ƒë·ªông th·∫•t b·∫°i!"
    docker logs \$CONTAINER_NAME
    exit 1
fi`
}

/**
 * Generate deploy script based on server type
 */
export function generateDeployScript(params: {
  projectName: string
  serverType: string
  domain?: string
  timestamp?: number
}): string {
  const { projectName, serverType, domain, timestamp } = params
  
  switch (serverType) {
    case SERVER_TYPES.NGINX:
      return generateNginxDeployScript({ projectName, domain: domain || 'localhost' })
    case SERVER_TYPES.APACHE:
      return generateApacheDeployScript({ projectName, domain: domain || 'localhost' })
    case SERVER_TYPES.NODE:
      return generateNodeDeployScript({ projectName })
    case SERVER_TYPES.DOCKER:
      return generateDockerDeployScript({ projectName, domain: domain || 'localhost' })
    default:
      return generateNginxDeployScript({ projectName, domain: domain || 'localhost' })
  }
}
