'use client'

import React, { useState } from 'react'
import { 
  Dialog, 
  DialogContent, 
  DialogHeader, 
  DialogTitle, 
  DialogDescription,
  DialogFooter 
} from './dialog'
import { Button } from './button'
import { Input } from './input'
import { Textarea } from './textarea'
import { Card, CardContent, CardHeader, CardTitle } from './card'
import { Wand2, Loader2, Sparkles, AlertCircle } from 'lucide-react'
import { ThemeParams } from '@/types'

interface BusinessInfo {
  companyName: string
  industry: string
  description: string
  targetAudience: string
  services: string
  location: string
  website?: string
  tone: 'professional' | 'friendly' | 'modern' | 'traditional'
  language: 'vietnamese' | 'english' | 'both'
}

interface AIContentGeneratorProps {
  open: boolean
  onOpenChange: (open: boolean) => void
  onGenerate: (themeParams: ThemeParams) => void
  currentTheme?: ThemeParams
  forceOpen?: boolean
  projectId?: string
}

const AIContentGenerator: React.FC<AIContentGeneratorProps> = ({
  open,
  onOpenChange,
  onGenerate,
  currentTheme,
  forceOpen = false,
  projectId
}) => {
  const [businessInfo, setBusinessInfo] = useState<BusinessInfo>({
    companyName: '',
    industry: '',
    description: '',
    targetAudience: '',
    services: '',
    location: '',
    website: '',
    tone: 'professional',
    language: 'vietnamese'
  })
  
  const [isGenerating, setIsGenerating] = useState(false)
  const [error, setError] = useState('')
  const [step, setStep] = useState<'form' | 'preview' | 'success'>('form')
  const [generatedContent, setGeneratedContent] = useState<ThemeParams | null>(null)
  const [retryAttempt, setRetryAttempt] = useState(0)
  const [progressMessage, setProgressMessage] = useState('')

  const handleInputChange = (field: keyof BusinessInfo, value: string) => {
    setBusinessInfo(prev => ({
      ...prev,
      [field]: value
    }))
  }

  const generateContent = async (retryCount = 0): Promise<void> => {
    if (!businessInfo.companyName || !businessInfo.industry || !businessInfo.description) {
      setError('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc')
      return
    }

    const maxRetries = 3
    setIsGenerating(true)
    setError('')
    setRetryAttempt(retryCount)
    
    // Enhanced progress messages
    if (retryCount === 0) {
      setProgressMessage('üöÄ ƒêang g·ª≠i y√™u c·∫ßu ƒë·∫øn AI...')
    } else {
      setProgressMessage(`üîÑ ƒêang th·ª≠ l·∫°i l·∫ßn ${retryCount + 1}... (AI c√≥ th·ªÉ c·∫ßn nhi·ªÅu th·ªùi gian h∆°n)`)
    }

    try {
      const requestData = { businessInfo, currentTheme }
      console.log(`üöÄ [AI-GENERATOR] Sending request (attempt ${retryCount + 1}/${maxRetries + 1}):`, requestData)
      
      // Update progress messages gradually
      const progressTimeouts: NodeJS.Timeout[] = []
      progressTimeouts.push(setTimeout(() => {
        setProgressMessage('ü§ñ AI ƒëang ph√¢n t√≠ch th√¥ng tin doanh nghi·ªáp c·ªßa b·∫°n...')
      }, 5000))
      
      progressTimeouts.push(setTimeout(() => {
        setProgressMessage('‚ú® AI ƒëang t·∫°o n·ªôi dung v√† m√†u s·∫Øc ph√π h·ª£p...')
      }, 15000))
      
      progressTimeouts.push(setTimeout(() => {
        setProgressMessage('üìù AI ƒëang ho√†n thi·ªán c√°c section chi ti·∫øt...')
      }, 30000))
      
      progressTimeouts.push(setTimeout(() => {
        setProgressMessage('‚è≥ S·∫Øp xong r·ªìi... AI ƒëang ki·ªÉm tra v√† t·ªëi ∆∞u n·ªôi dung...')
      }, 60000))
      
      progressTimeouts.push(setTimeout(() => {
        setProgressMessage('üïê AI v·∫´n ƒëang x·ª≠ l√Ω... ƒê√¢y l√† m·ªôt request ph·ª©c t·∫°p, vui l√≤ng ki√™n nh·∫´n...')
      }, 90000))
      
      progressTimeouts.push(setTimeout(() => {
        setProgressMessage('‚è∞ G·∫ßn ho√†n th√†nh... AI ƒëang t·ªïng h·ª£p t·∫•t c·∫£ n·ªôi dung...')
      }, 120000))
      
      // TƒÉng timeout cho fetch request l√™n 180 gi√¢y (3 ph√∫t)
      const controller = new AbortController()
      const fetchTimeoutId = setTimeout(() => controller.abort(), 180000) // 180 seconds timeout
      
      const response = await fetch('/api/generate-theme', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(requestData),
        signal: controller.signal
      })
      
      // Clear all timeouts
      clearTimeout(fetchTimeoutId)
      progressTimeouts.forEach(t => clearTimeout(t))
      
      console.log('üì° [AI-GENERATOR] Response status:', response.status, response.statusText)
      setProgressMessage('üì¶ ƒêang x·ª≠ l√Ω v√† ƒë·ªãnh d·∫°ng d·ªØ li·ªáu...')

      // X·ª≠ l√Ω 504 Gateway Timeout v·ªõi retry logic
      if (response.status === 504) {
        console.warn(`‚è±Ô∏è [AI-GENERATOR] Gateway timeout (attempt ${retryCount + 1}/${maxRetries + 1})`)
        
        if (retryCount < maxRetries) {
          // Exponential backoff: 3s, 6s, 12s
          const backoffDelay = Math.pow(2, retryCount) * 3000
          setError(
            `‚è±Ô∏è Server ƒëang x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n...\n\n` +
            `üîÑ ƒêang th·ª≠ l·∫°i l·∫ßn ${retryCount + 2}/${maxRetries + 1} sau ${backoffDelay / 1000}s\n\n` +
            `üí° AI ƒëang ph√¢n t√≠ch v√† t·∫°o n·ªôi dung chi ti·∫øt cho doanh nghi·ªáp c·ªßa b·∫°n. Vui l√≤ng ƒë·ª£i th√™m ch√∫t...`
          )
          
          await new Promise(resolve => setTimeout(resolve, backoffDelay))
          return generateContent(retryCount + 1)
        } else {
          throw new Error(
            `‚è±Ô∏è **Timeout: Server m·∫•t nhi·ªÅu th·ªùi gian x·ª≠ l√Ω h∆°n d·ª± ki·∫øn**\n\n` +
            `‚ùå **Nguy√™n nh√¢n c√≥ th·ªÉ:**\n` +
            `‚Ä¢ Server ƒëang qu√° t·∫£i v·ªõi nhi·ªÅu y√™u c·∫ßu ƒë·ªìng th·ªùi\n` +
            `‚Ä¢ Th√¥ng tin business qu√° ph·ª©c t·∫°p c·∫ßn nhi·ªÅu th·ªùi gian x·ª≠ l√Ω\n` +
            `‚Ä¢ K·∫øt n·ªëi ƒë·∫øn AI service b·ªã gi√°n ƒëo·∫°n\n\n` +
            `‚úÖ **Gi·∫£i ph√°p ƒë·ªÅ xu·∫•t:**\n` +
            `1Ô∏è‚É£ Th·ª≠ l·∫°i v·ªõi **m√¥ t·∫£ ng·∫Øn g·ªçn h∆°n** (3-5 c√¢u)\n` +
            `2Ô∏è‚É£ Ch·ªâ ƒëi·ªÅn **th√¥ng tin b·∫Øt bu·ªôc** (t√™n, ng√†nh ngh·ªÅ, m√¥ t·∫£)\n` +
            `3Ô∏è‚É£ Th·ª≠ l·∫°i sau **2-3 ph√∫t** khi server b·ªõt t·∫£i\n` +
            `4Ô∏è‚É£ S·ª≠ d·ª•ng **API Streaming** (t√≠nh nƒÉng m·ªõi, √≠t b·ªã timeout)\n\n` +
            `üìû N·∫øu v·∫•n ƒë·ªÅ ti·∫øp di·ªÖn, vui l√≤ng li√™n h·ªá h·ªó tr·ª£ k·ªπ thu·∫≠t.`
          )
        }
      }

      if (!response.ok) {
        const errorText = await response.text()
        console.error('üö® [AI-GENERATOR] HTTP Error:', {
          status: response.status,
          statusText: response.statusText,
          errorText: errorText
        })
        
        // X·ª≠ l√Ω c√°c l·ªói kh√°c v·ªõi retry cho 503
        if (response.status === 503 && retryCount < maxRetries) {
          const backoffDelay = Math.pow(2, retryCount) * 2000
          setError(`üîÑ Service t·∫°m th·ªùi kh√¥ng kh·∫£ d·ª•ng. ƒêang th·ª≠ l·∫°i sau ${backoffDelay / 1000}s...`)
          await new Promise(resolve => setTimeout(resolve, backoffDelay))
          return generateContent(retryCount + 1)
        }
        
        throw new Error(`HTTP ${response.status}: ${response.statusText}\n\nChi ti·∫øt: ${errorText}`)
      }

      const result = await response.json()
      console.log('‚úÖ [AI-GENERATOR] Response received:', result)
      
      // Check if response has themeParams (success) or explicit success flag
      if (result.success || result.themeParams) {
        // Log cache info if available
        if (result.cached || result.cacheHit) {
          console.log('üíæ [AI-GENERATOR] Served from cache:', {
            cachedAt: result.cachedAt,
            servedAt: result.servedAt,
            cacheHit: result.cacheHit
          })
        }
        
        setGeneratedContent(result.themeParams)
        setStep('preview')
      } else {
        // Handle specific error types
        if (result.errorType === 'AI_SERVICE_UNAVAILABLE') {
          throw new Error(`${result.error}\n\n${result.suggestion || ''}`)
        } else if (result.errorType === 'QUOTA_EXCEEDED') {
          throw new Error(`${result.error}\n\nVui l√≤ng th·ª≠ l·∫°i sau ${Math.ceil(result.retryAfter / 60)} ph√∫t.`)
        } else if (result.errorType === 'QUEUE_OVERLOADED') {
          throw new Error(
            `‚ö†Ô∏è H·ªá th·ªëng ƒëang x·ª≠ l√Ω nhi·ªÅu y√™u c·∫ßu.\n\n` +
            `Vui l√≤ng th·ª≠ l·∫°i sau ${Math.ceil(result.retryAfter / 60)} ph√∫t.\n\n` +
            `Tr·∫°ng th√°i h√†ng ƒë·ª£i:\n` +
            `‚Ä¢ ƒêang x·ª≠ l√Ω: ${result.queueStats?.activeTasks || 0} y√™u c·∫ßu\n` +
            `‚Ä¢ ƒêang ch·ªù: ${result.queueStats?.queuedTasks || 0} y√™u c·∫ßu`
          )
        } else {
          throw new Error(result.error || 'C√≥ l·ªói x·∫£y ra khi t·∫°o n·ªôi dung. Vui l√≤ng th·ª≠ l·∫°i.')
        }
      }
    } catch (err) {
      console.error('üö® [AI-GENERATOR] Generation error:', {
        error: err,
        message: err instanceof Error ? err.message : 'Unknown error',
        stack: err instanceof Error ? err.stack : 'No stack trace',
        businessInfo: businessInfo,
        currentTheme: currentTheme,
        retryCount
      })
      
      // Handle AbortError (client-side timeout)
      if (err instanceof Error && err.name === 'AbortError') {
        if (retryCount < maxRetries) {
          const backoffDelay = Math.pow(2, retryCount) * 3000
          setError(
            `‚è±Ô∏è **Request ƒëang x·ª≠ l√Ω qu√° l√¢u...**\n\n` +
            `üîÑ ƒêang th·ª≠ l·∫°i l·∫ßn ${retryCount + 2}/${maxRetries + 1} sau ${backoffDelay / 1000}s\n\n` +
            `üí° Y√™u c·∫ßu c·ªßa b·∫°n ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω, vui l√≤ng ki√™n nh·∫´n...`
          )
          await new Promise(resolve => setTimeout(resolve, backoffDelay))
          return generateContent(retryCount + 1)
        } else {
          setError(
            `‚è±Ô∏è **Request timeout sau ${maxRetries + 1} l·∫ßn th·ª≠ (180 gi√¢y/3 ph√∫t m·ªói l·∫ßn)**\n\n` +
            `‚ùå **Nguy√™n nh√¢n:**\n` +
            `‚Ä¢ AI service ƒëang x·ª≠ l√Ω qu√° l√¢u (>180s)\n` +
            `‚Ä¢ Th√¥ng tin business c√≥ th·ªÉ qu√° chi ti·∫øt\n` +
            `‚Ä¢ K·∫øt n·ªëi m·∫°ng kh√¥ng ·ªïn ƒë·ªãnh\n` +
            `‚Ä¢ Server AI ƒëang qu√° t·∫£i\n\n` +
            `‚úÖ **Gi·∫£i ph√°p:**\n` +
            `1Ô∏è‚É£ **R√∫t g·ªçn m√¥ t·∫£** business xu·ªëng 3-5 c√¢u ng·∫Øn g·ªçn\n` +
            `2Ô∏è‚É£ **B·ªè qua** c√°c tr∆∞·ªùng kh√¥ng b·∫Øt bu·ªôc (website, location...)\n` +
            `3Ô∏è‚É£ **Th·ª≠ l·∫°i sau 2-3 ph√∫t** khi server b·ªõt t·∫£i\n` +
            `4Ô∏è‚É£ **Ki·ªÉm tra k·∫øt n·ªëi internet** c·ªßa b·∫°n\n\n` +
            `üìß Li√™n h·ªá h·ªó tr·ª£ n·∫øu v·∫•n ƒë·ªÅ v·∫´n ti·∫øp di·ªÖn.`
          )
        }
      } else {
        setError(err instanceof Error ? err.message : 'C√≥ l·ªói x·∫£y ra khi t·∫°o n·ªôi dung')
      }
    } finally {
      setIsGenerating(false)
      setRetryAttempt(0)
      setProgressMessage('')
    }
  }

  const applyContent = async () => {
    if (generatedContent) {
      // L∆∞u language v√†o project n·∫øu c√≥ projectId
      if (projectId) {
        try {
          await fetch(`/api/projects/${projectId}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              language: businessInfo.language
            })
          })
        } catch (error) {
          console.error('Error saving language to project:', error)
        }
      }
      
      onGenerate(generatedContent)
      setStep('success')
      setTimeout(() => {
        onOpenChange(false)
        setStep('form')
        setGeneratedContent(null)
      }, 2000)
    }
  }

  const resetForm = () => {
    setStep('form')
    setGeneratedContent(null)
    setError('')
  }

  return (
    <Dialog 
      open={open} 
      onOpenChange={(newOpen: boolean) => {
        // N·∫øu forceOpen = true v√† ƒëang ·ªü step form, kh√¥ng cho ph√©p ƒë√≥ng
        if (forceOpen && step === 'form' && !newOpen) {
          return
        }
        onOpenChange(newOpen)
      }}
    >
      <DialogContent className="max-w-2xl max-h-[80vh] overflow-y-auto">
        {step === 'form' && (
          <>
            <DialogHeader>
              <DialogTitle className="flex items-center gap-2">
                <Wand2 className="h-5 w-5 text-purple-600" />
                AI T·∫°o N·ªôi Dung Th√¥ng Minh
              </DialogTitle>
              <DialogDescription>
                {forceOpen ? (
                  <div className="space-y-2">
                    <span className="text-orange-600 font-medium block">
                      ‚ö†Ô∏è Vui l√≤ng ƒëi·ªÅn th√¥ng tin b·∫Øt bu·ªôc ƒë·ªÉ ti·∫øp t·ª•c t·∫°o project
                    </span>
                    <span className="text-sm text-gray-600 block">
                      B·∫°n kh√¥ng th·ªÉ ƒë√≥ng popup n√†y cho ƒë·∫øn khi ho√†n th√†nh vi·ªác ƒëi·ªÅn th√¥ng tin v√† t·∫°o n·ªôi dung AI.
                    </span>
                  </div>
                ) : (
                  'Nh·∫≠p th√¥ng tin doanh nghi·ªáp ƒë·ªÉ AI t·ª± ƒë·ªông t·∫°o n·ªôi dung v√† m√†u s·∫Øc ph√π h·ª£p cho website c·ªßa b·∫°n'
                )}
              </DialogDescription>
            </DialogHeader>

            <div className="space-y-6">
              {/* Basic Information */}
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">Th√¥ng tin c∆° b·∫£n *</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium mb-2">T√™n c√¥ng ty *</label>
                    <Input
                      value={businessInfo.companyName}
                      onChange={(e) => handleInputChange('companyName', e.target.value)}
                      placeholder="V√≠ d·ª•: C√† Ph√™ Vi·ªát Plus"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium mb-2">Ng√†nh ngh·ªÅ *</label>
                    <Input
                      value={businessInfo.industry}
                      onChange={(e) => handleInputChange('industry', e.target.value)}
                      placeholder="V√≠ d·ª•: Xu·∫•t kh·∫©u c√† ph√™, Th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠, C√¥ng ngh·ªá"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium mb-2">M√¥ t·∫£ doanh nghi·ªáp *</label>
                    <Textarea
                      value={businessInfo.description}
                      onChange={(e) => handleInputChange('description', e.target.value)}
                      placeholder="M√¥ t·∫£ ng·∫Øn g·ªçn v·ªÅ c√¥ng ty, s·∫£n ph·∫©m/d·ªãch v·ª• ch√≠nh..."
                      rows={3}
                    />
                  </div>
                </CardContent>
              </Card>

              {/* Target & Services */}
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">Kh√°ch h√†ng & D·ªãch v·ª•</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium mb-2">Kh√°ch h√†ng m·ª•c ti√™u</label>
                    <Input
                      value={businessInfo.targetAudience}
                      onChange={(e) => handleInputChange('targetAudience', e.target.value)}
                      placeholder="V√≠ d·ª•: Nh√† nh·∫≠p kh·∫©u qu·ªëc t·∫ø, Doanh nghi·ªáp SME, Kh√°ch h√†ng c√° nh√¢n"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium mb-2">S·∫£n ph·∫©m/D·ªãch v·ª• ch√≠nh</label>
                    <Textarea
                      value={businessInfo.services}
                      onChange={(e) => handleInputChange('services', e.target.value)}
                      placeholder="Li·ªát k√™ c√°c s·∫£n ph·∫©m/d·ªãch v·ª• ch√≠nh..."
                      rows={2}
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium mb-2">ƒê·ªãa ƒëi·ªÉm</label>
                    <Input
                      value={businessInfo.location}
                      onChange={(e) => handleInputChange('location', e.target.value)}
                      placeholder="V√≠ d·ª•: TP. H·ªì Ch√≠ Minh, Vi·ªát Nam"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium mb-2">Website hi·ªán t·∫°i (n·∫øu c√≥)</label>
                    <Input
                      value={businessInfo.website}
                      onChange={(e) => handleInputChange('website', e.target.value)}
                      placeholder="https://example.com"
                    />
                  </div>
                </CardContent>
              </Card>

              {/* Style Preferences */}
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">Phong c√°ch & Ng√¥n ng·ªØ</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium mb-2">T√¥ng gi·ªçng</label>
                    <select
                      value={businessInfo.tone}
                      onChange={(e) => handleInputChange('tone', e.target.value)}
                      className="w-full p-2 border border-gray-300 rounded-md"
                    >
                      <option value="professional">Chuy√™n nghi·ªáp</option>
                      <option value="friendly">Th√¢n thi·ªán</option>
                      <option value="modern">Hi·ªán ƒë·∫°i</option>
                      <option value="traditional">Truy·ªÅn th·ªëng</option>
                    </select>
                  </div>

                  <div>
                    <label className="block text-sm font-medium mb-2">Ng√¥n ng·ªØ</label>
                    <select
                      value={businessInfo.language}
                      onChange={(e) => handleInputChange('language', e.target.value)}
                      className="w-full p-2 border border-gray-300 rounded-md"
                    >
                      <option value="vietnamese">Ti·∫øng Vi·ªát</option>
                      <option value="english">English</option>
                    </select>
                  </div>
                </CardContent>
              </Card>

              {/* Tips to avoid timeout - Show when not generating */}
              {!isGenerating && !error && (
                <div className="p-4 bg-gradient-to-r from-blue-50 to-purple-50 border border-blue-200 rounded-lg">
                  <div className="flex items-start gap-2 mb-2">
                    <Sparkles className="h-5 w-5 text-blue-600 mt-0.5 flex-shrink-0" />
                    <div>
                      <p className="text-sm font-semibold text-blue-900">üí° Tips ƒë·ªÉ t·∫°o n·ªôi dung nhanh v√† ch√≠nh x√°c:</p>
                      <ul className="text-xs text-blue-800 mt-2 space-y-1 ml-1">
                        <li>‚úÖ M√¥ t·∫£ ng·∫Øn g·ªçn, s√∫c t√≠ch (3-5 c√¢u)</li>
                        <li>‚úÖ T·∫≠p trung v√†o ƒëi·ªÉm m·∫°nh ch√≠nh c·ªßa doanh nghi·ªáp</li>
                        <li>‚úÖ Ch·ªâ ƒëi·ªÅn th√¥ng tin b·∫Øt bu·ªôc n·∫øu mu·ªën t·∫°o nhanh</li>
                        <li>‚ö†Ô∏è Tr√°nh m√¥ t·∫£ qu√° d√†i (&gt;500 t·ª´) ƒë·ªÉ kh√¥ng b·ªã timeout</li>
                      </ul>
                    </div>
                  </div>
                </div>
              )}

              {/* Progress Message when generating */}
              {isGenerating && progressMessage && (
                <div className="flex items-center gap-3 p-4 bg-blue-50 border border-blue-200 rounded-md">
                  <Loader2 className="h-5 w-5 text-blue-600 animate-spin flex-shrink-0" />
                  <div className="flex-1">
                    <p className="text-sm font-medium text-blue-900">{progressMessage}</p>
                    {retryAttempt > 0 && (
                      <p className="text-xs text-blue-700 mt-1">
                        L·∫ßn th·ª≠: {retryAttempt + 1}/4 | AI ƒëang x·ª≠ l√Ω th√¥ng tin c·ªßa b·∫°n...
                      </p>
                    )}
                    <p className="text-xs text-blue-600 mt-2">
                      ‚è±Ô∏è Th·ªùi gian x·ª≠ l√Ω th∆∞·ªùng: 30-60 gi√¢y | T·ªëi ƒëa: 180 gi√¢y (3 ph√∫t)
                    </p>
                  </div>
                </div>
              )}

              {error && (
                <div className="space-y-3">
                  <div className="flex items-center gap-2 p-3 bg-red-50 border border-red-200 rounded-md text-red-700">
                    <AlertCircle className="h-4 w-4 flex-shrink-0" />
                    <div className="flex-1">
                      <p className="text-sm whitespace-pre-line">{error}</p>
                    </div>
                  </div>
                  {!isGenerating && (
                    <div className="flex justify-center">
                      <Button 
                        variant="outline" 
                        onClick={() => generateContent(0)}
                        disabled={isGenerating}
                        className="text-sm"
                      >
                        <Loader2 className="h-4 w-4 mr-2" />
                        Th·ª≠ l·∫°i
                      </Button>
                    </div>
                  )}
                </div>
              )}
            </div>

            <DialogFooter>
              {!forceOpen ? (
                <Button variant="outline" onClick={() => onOpenChange(false)}>
                  H·ªßy
                </Button>
              ) : (
                <div className="text-sm text-orange-600 flex items-center gap-1">
                  <AlertCircle className="h-4 w-4" />
                  Vui l√≤ng ho√†n th√†nh th√¥ng tin ƒë·ªÉ ti·∫øp t·ª•c
                </div>
              )}
              <Button 
                onClick={() => generateContent(0)}
                disabled={isGenerating || !businessInfo.companyName || !businessInfo.industry || !businessInfo.description}
                className="bg-purple-600 hover:bg-purple-700"
              >
                {isGenerating ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    {retryAttempt > 0 ? `ƒêang th·ª≠ l·∫°i (${retryAttempt + 1}/4)...` : 'ƒêang t·∫°o n·ªôi dung...'}
                  </>
                ) : (
                  <>
                    <Sparkles className="mr-2 h-4 w-4" />
                    T·∫°o n·ªôi dung AI
                  </>
                )}
              </Button>
            </DialogFooter>
          </>
        )}

        {step === 'preview' && generatedContent && (
          <>
            <DialogHeader>
              <DialogTitle className="flex items-center gap-2">
                <Sparkles className="h-5 w-5 text-green-600" />
                N·ªôi dung ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!
              </DialogTitle>
              <DialogDescription>
                Xem tr∆∞·ªõc n·ªôi dung v√† m√†u s·∫Øc AI ƒë·ªÅ xu·∫•t cho website c·ªßa b·∫°n
              </DialogDescription>
            </DialogHeader>

            <div className="space-y-4 max-h-96 overflow-y-auto">
              {/* Colors Preview */}
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">B·∫£ng m√†u ƒë∆∞·ª£c t·∫°o</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-3 gap-3">
                    <div className="text-center">
                      <div 
                        className="w-full h-16 rounded-lg border"
                        style={{ backgroundColor: generatedContent.colors.primary }}
                      ></div>
                      <p className="text-sm mt-2">M√†u ch√≠nh</p>
                      <p className="text-xs text-gray-600">{generatedContent.colors.primary}</p>
                    </div>
                    <div className="text-center">
                      <div 
                        className="w-full h-16 rounded-lg border"
                        style={{ backgroundColor: generatedContent.colors.secondary }}
                      ></div>
                      <p className="text-sm mt-2">M√†u ph·ª•</p>
                      <p className="text-xs text-gray-600">{generatedContent.colors.secondary}</p>
                    </div>
                    <div className="text-center">
                      <div 
                        className="w-full h-16 rounded-lg border"
                        style={{ backgroundColor: generatedContent.colors.accent }}
                      ></div>
                      <p className="text-sm mt-2">M√†u nh·∫•n</p>
                      <p className="text-xs text-gray-600">{generatedContent.colors.accent}</p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* Content Preview */}
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">N·ªôi dung Header & Hero</CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  <div>
                    <p className="font-medium">T√™n c√¥ng ty:</p>
                    <p className="text-sm text-gray-600">{generatedContent.content?.header?.title}</p>
                  </div>
                  <div>
                    <p className="font-medium">Slogan:</p>
                    <p className="text-sm text-gray-600">{generatedContent.content?.header?.subtitle}</p>
                  </div>
                  <div>
                    <p className="font-medium">Ti√™u ƒë·ªÅ Hero:</p>
                    <p className="text-sm text-gray-600">{generatedContent.content?.hero?.title}</p>
                    <p className="text-xs text-blue-600">
                      K√≠ch th∆∞·ªõc: <strong>{generatedContent.content?.hero?.titleSize || 'xl'}</strong> 
                      | ƒê·ªô ƒë·∫≠m: <strong>{generatedContent.content?.hero?.titleWeight || 'semibold'}</strong>
                    </p>
                  </div>
                  <div>
                    <p className="font-medium">Ti√™u ƒë·ªÅ ph·ª• Hero:</p>
                    <p className="text-sm text-gray-600">{generatedContent.content?.hero?.subtitle}</p>
                    <p className="text-xs text-blue-600">
                      K√≠ch th∆∞·ªõc: <strong>{generatedContent.content?.hero?.subtitleSize || 'lg'}</strong> 
                      | ƒê·ªô ƒë·∫≠m: <strong>{generatedContent.content?.hero?.subtitleWeight || 'medium'}</strong>
                    </p>
                  </div>
                  <div>
                    <p className="font-medium">M√¥ t·∫£ Hero:</p>
                    <p className="text-sm text-gray-600">{generatedContent.content?.hero?.description}</p>
                    <p className="text-xs text-blue-600">
                      K√≠ch th∆∞·ªõc: <strong>{generatedContent.content?.hero?.descriptionSize || 'base'}</strong>
                    </p>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">V·∫•n ƒë·ªÅ & Gi·∫£i ph√°p</CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  <div>
                    <p className="font-medium">V·∫•n ƒë·ªÅ kh√°ch h√†ng g·∫∑p ph·∫£i:</p>
                    {generatedContent.content?.problems?.items?.map((problem, index) => (
                      <div key={index} className="ml-4 mb-2">
                        <p className="text-sm font-medium">‚Ä¢ {problem.title}</p>
                        <p className="text-xs text-gray-600 ml-2">{problem.description}</p>
                      </div>
                    ))}
                  </div>
                  <div className="mt-4">
                    <p className="font-medium">Gi·∫£i ph√°p c·ªßa ch√∫ng t√¥i:</p>
                    {generatedContent.content?.solutions?.items?.map((solution, index) => (
                      <div key={index} className="ml-4 mb-2">
                        <p className="text-sm font-medium">‚Ä¢ {solution.title}</p>
                        <p className="text-xs text-gray-600 ml-2">{solution.description}</p>
                        {solution.benefit && (
                          <p className="text-xs text-green-600 ml-2 font-medium">‚úì {solution.benefit}</p>
                        )}
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">Lead Magnet & T√†i li·ªáu</CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  <div>
                    <p className="font-medium">Ti√™u ƒë·ªÅ Lead Magnet:</p>
                    <p className="text-sm text-gray-600">{generatedContent.content?.leadMagnet?.title}</p>
                  </div>
                  <div>
                    <p className="font-medium">M√¥ t·∫£:</p>
                    <p className="text-sm text-gray-600">{generatedContent.content?.leadMagnet?.description}</p>
                  </div>
                  <div>
                    <p className="font-medium">Ti√™u ƒë·ªÅ h∆∞·ªõng d·∫´n:</p>
                    <p className="text-sm text-gray-600">{generatedContent.content?.leadMagnet?.guideTitle}</p>
                    <p className="text-xs text-gray-500">{generatedContent.content?.leadMagnet?.guideSubtitle}</p>
                  </div>
                  <div>
                    <p className="font-medium">Form:</p>
                    <p className="text-sm text-gray-600">{generatedContent.content?.leadMagnet?.formTitle}</p>
                    <p className="text-xs text-gray-500">{generatedContent.content?.leadMagnet?.formDescription}</p>
                    <p className="text-xs text-blue-600">{generatedContent.content?.leadMagnet?.buttonText}</p>
                  </div>
                  <div>
                    <p className="font-medium">T√≠nh nƒÉng ch√≠nh:</p>
                    {generatedContent.content?.leadMagnet?.features?.map((feature, index) => (
                      <div key={index} className="ml-4 mb-2">
                        <p className="text-sm font-medium">‚Ä¢ {feature.title}</p>
                        <p className="text-xs text-gray-600 ml-2">{feature.description}</p>
                      </div>
                    ))}
                  </div>
                  <div>
                    <p className="font-medium">Ch·ªâ s·ªë tin c·∫≠y:</p>
                    {generatedContent.content?.leadMagnet?.trustIndicators?.map((indicator, index) => (
                      <div key={index} className="ml-4 mb-2">
                        <p className="text-sm font-medium">‚Ä¢ {indicator.number} {indicator.label}</p>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">L√Ω do ch·ªçn ch√∫ng t√¥i</CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  <div>
                    <p className="font-medium">Ti√™u ƒë·ªÅ:</p>
                    <p className="text-sm text-gray-600">{generatedContent.content?.whyChooseUs?.title}</p>
                  </div>
                  <div>
                    <p className="font-medium">Ph·ª• ƒë·ªÅ:</p>
                    <p className="text-sm text-gray-600">{generatedContent.content?.whyChooseUs?.subtitle}</p>
                  </div>
                  <div>
                    <p className="font-medium">ƒêi·ªÉm m·∫°nh:</p>
                    {generatedContent.content?.whyChooseUs?.strengths?.map((strength, index) => (
                      <div key={index} className="ml-4 mb-2">
                        <p className="text-sm font-medium">‚Ä¢ {strength.title}</p>
                        <p className="text-xs text-gray-600 ml-2">{strength.description}</p>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">ƒê√°nh gi√° kh√°ch h√†ng</CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  <div>
                    <p className="font-medium">Ti√™u ƒë·ªÅ:</p>
                    <p className="text-sm text-gray-600">{generatedContent.content?.testimonials?.title}</p>
                  </div>
                  <div>
                    <p className="font-medium">Testimonials:</p>
                    {generatedContent.content?.testimonials?.testimonials?.map((testimonial, index) => (
                      <div key={index} className="ml-4 mb-2 border-l-2 border-gray-200 pl-3">
                        <p className="text-sm font-medium">{testimonial.name} - {testimonial.title}</p>
                        <p className="text-xs text-gray-600">{testimonial.company}</p>
                        <p className="text-xs text-gray-500 italic">&quot;{testimonial.content}&quot;</p>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">S·∫£n ph·∫©m/D·ªãch v·ª•</CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  <div>
                    <p className="font-medium">Ti√™u ƒë·ªÅ:</p>
                    <p className="text-sm text-gray-600">{generatedContent.content?.products?.title}</p>
                  </div>
                  <div>
                    <p className="font-medium">M√¥ t·∫£:</p>
                    <p className="text-sm text-gray-600">{generatedContent.content?.products?.description}</p>
                  </div>
                  <div>
                    <p className="font-medium">S·∫£n ph·∫©m/D·ªãch v·ª•:</p>
                    {generatedContent.content?.products?.items?.map((product, index) => (
                      <div key={index} className="border-l-4 border-gray-200 pl-3 mb-3">
                        <p className="font-medium">{product.name}</p>
                        <p className="text-sm text-gray-600">{product.description}</p>
                        {product.price && (
                          <p className="text-sm font-medium text-green-600">{product.price}</p>
                        )}
                        {product.category && (
                          <p className="text-xs text-gray-500">Danh m·ª•c: {product.category}</p>
                        )}
                        {product.features && (
                          <div className="mt-2">
                            <p className="text-xs text-gray-500">T√≠nh nƒÉng:</p>
                            <ul className="text-xs text-gray-500 ml-4">
                              {product.features.map((feature, idx) => (
                                <li key={idx}>‚Ä¢ {feature}</li>
                              ))}
                            </ul>
                          </div>
                        )}
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">Th√¥ng tin li√™n h·ªá</CardTitle>
                </CardHeader>
                <CardContent className="space-y-2">
                  <div>
                    <p className="font-medium">V·ªÅ ch√∫ng t√¥i:</p>
                    <p className="text-sm text-gray-600">{generatedContent.content?.about?.description}</p>
                  </div>
                  <div>
                    <p className="font-medium">Call to Action:</p>
                    <p className="text-sm text-gray-600">{generatedContent.content?.cta?.title}</p>
                    <p className="text-xs text-gray-500">{generatedContent.content?.cta?.description}</p>
                  </div>
                  {generatedContent.content?.footer?.contact && (
                    <div>
                      <p className="font-medium">Li√™n h·ªá:</p>
                      <p className="text-sm text-gray-600">üìû {generatedContent.content?.footer?.contact?.phone}</p>
                      <p className="text-sm text-gray-600">‚úâÔ∏è {generatedContent.content?.footer?.contact?.email}</p>
                      <p className="text-sm text-gray-600">üìç {generatedContent.content?.footer?.contact?.address}</p>
                    </div>
                  )}
                </CardContent>
              </Card>
            </div>

            <DialogFooter>
              <Button variant="outline" onClick={resetForm}>
                T·∫°o l·∫°i
              </Button>
              <Button onClick={applyContent} className="bg-green-600 hover:bg-green-700">
                √Åp d·ª•ng n·ªôi dung
              </Button>
            </DialogFooter>
          </>
        )}

        {step === 'success' && (
          <div className="text-center py-8">
            <div className="mx-auto flex items-center justify-center w-12 h-12 bg-green-100 rounded-full mb-4">
              <Sparkles className="h-6 w-6 text-green-600" />
            </div>
            <h3 className="text-lg font-medium text-gray-900 mb-2">
              Ho√†n th√†nh!
            </h3>
            <p className="text-sm text-gray-600">
              N·ªôi dung ƒë√£ ƒë∆∞·ª£c √°p d·ª•ng th√†nh c√¥ng v√†o theme c·ªßa b·∫°n.
            </p>
          </div>
        )}
      </DialogContent>
    </Dialog>
  )
}

export default AIContentGenerator 